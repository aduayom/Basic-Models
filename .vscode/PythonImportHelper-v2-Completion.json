[
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "linear_model",
        "importPath": "sklearn",
        "description": "sklearn",
        "isExtraImport": true,
        "detail": "sklearn",
        "documentation": {}
    },
    {
        "label": "linear_model",
        "importPath": "sklearn",
        "description": "sklearn",
        "isExtraImport": true,
        "detail": "sklearn",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "stats",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Linear regression.Linear_regression",
        "description": "Linear regression.Linear_regression",
        "peekOfCode": "df = pd.read_csv('other_files\\cells.csv')\nprint(df)\n#plt.xlabel('time')\n#plt.ylabel('cells')\n#plt.scatter(df.time, df.cells,color='red',marker='+')\n#For linear regression, Y=the value we want to predict\n#X= all independent variables upon which Y depends. \n#3 steps for linear regression....\n#Step 1: Create the instance of the model\n#Step 2: .fit() to train the model or fit a linear model",
        "detail": "Linear regression.Linear_regression",
        "documentation": {}
    },
    {
        "label": "x_df",
        "kind": 5,
        "importPath": "Linear regression.Linear_regression",
        "description": "Linear regression.Linear_regression",
        "peekOfCode": "x_df = df.drop('cells', axis='columns')\n#Or you can pick columns manually. Remember double brackets.\n#Single bracket returns as series whereas double returns pandas dataframe which is what the model expects.\n#x_df=df[['time']]\nprint(x_df.dtypes)  #Prints as object when you drop cells or use double brackets [[]]\n#Prints as float64 if you do only single brackets, which is not the right type for our model. \ny_df = df.cells\n#print(x_df)\n#print(y_df)\n#TO create a model instance ",
        "detail": "Linear regression.Linear_regression",
        "documentation": {}
    },
    {
        "label": "y_df",
        "kind": 5,
        "importPath": "Linear regression.Linear_regression",
        "description": "Linear regression.Linear_regression",
        "peekOfCode": "y_df = df.cells\n#print(x_df)\n#print(y_df)\n#TO create a model instance \nreg = linear_model.LinearRegression()  #Create an instance of the model.\nreg.fit(x_df,y_df)   #Train the model or fits a linear model\nprint(reg.score(x_df,y_df))  #Prints the R^2 value, a measure of how well\n#observed values are replicated by the model. \n#Test the model by Predicting cells for some values reg.predict()\nprint(\"Predicted # cells...\", reg.predict([[2.3]]))",
        "detail": "Linear regression.Linear_regression",
        "documentation": {}
    },
    {
        "label": "reg",
        "kind": 5,
        "importPath": "Linear regression.Linear_regression",
        "description": "Linear regression.Linear_regression",
        "peekOfCode": "reg = linear_model.LinearRegression()  #Create an instance of the model.\nreg.fit(x_df,y_df)   #Train the model or fits a linear model\nprint(reg.score(x_df,y_df))  #Prints the R^2 value, a measure of how well\n#observed values are replicated by the model. \n#Test the model by Predicting cells for some values reg.predict()\nprint(\"Predicted # cells...\", reg.predict([[2.3]]))\n# Y = m * X + b (m is coefficient and b is intercept)\n#Get the intercept and coefficient values\nb = reg.intercept_\nm = reg.coef_",
        "detail": "Linear regression.Linear_regression",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Linear regression.Linear_regression",
        "description": "Linear regression.Linear_regression",
        "peekOfCode": "b = reg.intercept_\nm = reg.coef_\n#Manually verify the above calculation\nprint(\"From maual calculation, cells = \", (m*2.3 + b))\n#Now predict cells for a list of times by reading time values from a csv file\ncells_predict_df = pd.read_csv(\"other_files/cells_predict.csv\")\nprint(cells_predict_df.head())\npredicted_cells = reg.predict(cells_predict_df)\nprint(predicted_cells)\n#Add the new predicted cells values as a new column to cells_predict_df dataframe",
        "detail": "Linear regression.Linear_regression",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "Linear regression.Linear_regression",
        "description": "Linear regression.Linear_regression",
        "peekOfCode": "m = reg.coef_\n#Manually verify the above calculation\nprint(\"From maual calculation, cells = \", (m*2.3 + b))\n#Now predict cells for a list of times by reading time values from a csv file\ncells_predict_df = pd.read_csv(\"other_files/cells_predict.csv\")\nprint(cells_predict_df.head())\npredicted_cells = reg.predict(cells_predict_df)\nprint(predicted_cells)\n#Add the new predicted cells values as a new column to cells_predict_df dataframe\ncells_predict_df['cells']=predicted_cells",
        "detail": "Linear regression.Linear_regression",
        "documentation": {}
    },
    {
        "label": "cells_predict_df",
        "kind": 5,
        "importPath": "Linear regression.Linear_regression",
        "description": "Linear regression.Linear_regression",
        "peekOfCode": "cells_predict_df = pd.read_csv(\"other_files/cells_predict.csv\")\nprint(cells_predict_df.head())\npredicted_cells = reg.predict(cells_predict_df)\nprint(predicted_cells)\n#Add the new predicted cells values as a new column to cells_predict_df dataframe\ncells_predict_df['cells']=predicted_cells\nprint(cells_predict_df)\ncells_predict_df.to_csv(\"other_files/predicted_cells.csv\")\n##############################\n#",
        "detail": "Linear regression.Linear_regression",
        "documentation": {}
    },
    {
        "label": "predicted_cells",
        "kind": 5,
        "importPath": "Linear regression.Linear_regression",
        "description": "Linear regression.Linear_regression",
        "peekOfCode": "predicted_cells = reg.predict(cells_predict_df)\nprint(predicted_cells)\n#Add the new predicted cells values as a new column to cells_predict_df dataframe\ncells_predict_df['cells']=predicted_cells\nprint(cells_predict_df)\ncells_predict_df.to_csv(\"other_files/predicted_cells.csv\")\n##############################\n#\n#####################################################\n#Using Seaborn for plotting and linregress from scipy stats library",
        "detail": "Linear regression.Linear_regression",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Linear regression.Linear_regression",
        "description": "Linear regression.Linear_regression",
        "peekOfCode": "df = pd.read_csv('other_files/cells.csv')\nimport seaborn as sns\nsns.set(style='darkgrid')\nsns.lmplot(x='time', y='cells', data=df, order=1)\n#If you want equation, not possible to display in seaborn but you can get it the\n#regular way using scipy stats module. \nfrom scipy import stats\nslope, intercept, r_value, p_value, std_err = stats.linregress(df['time'],df['cells'])\nprint(slope, intercept)\n#Compare the slope and intercept reported with m and b values from above.",
        "detail": "Linear regression.Linear_regression",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Multiple linear regression.Multi_linear_regression",
        "description": "Multiple linear regression.Multi_linear_regression",
        "peekOfCode": "df = pd.read_excel('other_files/images_analyzed.xlsx')\nprint(df.head())\n#A few plots in Seaborn to understand the data\nimport seaborn as sns\nsns.lmplot(x='Time', y='Images_Analyzed', data=df, hue='Age')  #Scatterplot with linear regression fit and 95% confidence interval\nsns.lmplot(x='Coffee', y='Images_Analyzed', data=df, hue='Age', order=2)\n#Looks like too much coffee is not good... negative effects\n#sns.lmplot(x='Age', y='Images_Analyzed', data=df, hue='Age')\nimport numpy as np\nfrom sklearn import linear_model",
        "detail": "Multiple linear regression.Multi_linear_regression",
        "documentation": {}
    },
    {
        "label": "reg",
        "kind": 5,
        "importPath": "Multiple linear regression.Multi_linear_regression",
        "description": "Multiple linear regression.Multi_linear_regression",
        "peekOfCode": "reg = linear_model.LinearRegression()\n#Now let us call fit method to train the model using independent variables.\n#And the value that needs to be predicted (Images_Analyzed)\nreg.fit(df[['Time', 'Coffee', 'Age']], df.Images_Analyzed) #Indep variables, dep. variable to be predicted\n#Model is ready. Let us check the coefficients, stored as reg.coef_.\n#These are a, b, and c from our equation. \n#Intercept is stored as reg.intercept_\nprint(reg.coef_, reg.intercept_)\n#All set to predict the number of images someone would analyze at a given time\nprint(reg.predict([[13, 2, 23]]))",
        "detail": "Multiple linear regression.Multi_linear_regression",
        "documentation": {}
    }
]